# -*- coding: utf-8 -*-
"""Project Pacman Supermarket Andi.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKZNWfSSVFr2ZWBusOu65ytL6vte7L3s
"""

#import table
from tabulate import tabulate

class Transaction:
  def __init__(self):
      """
      Inisialisasi objek transaksi dengan daftar item kosong
      """
      self.items = []

  def add_item(self, nama_item, jumlah_item, harga_item):
      """
      Fungsi untuk menambahkan item yang ingin dibeli ke dalam list items

      Parameter:
      ---------
          data : dict
                Didalam data terdapat nama item, jumlah item, harga item, dan total harga

          nama_item : str
                Nama item yang akan diinputkan

          jumlah_item : int
                Jumlah item yang akan diinputkan

          harga_item : int
                Harga per item dalam rupiah yang akan diinputkan

      Returns:
      --------
      None
      """
      try:
        #data merupakan dictionary yang digunakan untuk menyimpan nama_item, jumlah_item,
        #harga_item, dan total_harga
        data = {"nama_item" : str(nama_item),
                "jumlah_item" : int(jumlah_item),
                "harga_item" : int(harga_item),
                "total_harga" : int(jumlah_item * harga_item)}

        #input data ke dalam daftar list items
        self.items.append(data)

      except ValueError:
        print("Tipe data yang diinputkan tidak sesuai. Pastikan jumlah item, harga item, dan total harga berupa angka")

      except TypeError:
        print("Tipe data tidak sesuai")

  def check_order(self):
      """
      Memeriksa apakah transaksi sudah benar atau terdapat kesalahan dalam
      melakukan input data

      Jika tidak ada transaksi, akan mencetak pesan "Tidak ada daftar transaksi".
      Jika terdapat kesalahan dalam input data, akan mencetak pesan "Terdapat kesalahan dalam input data".
      Jika transaksi sudah benar, akan mencetak pesan "Transaksi sudah benar".

      Parameter:
      ---------
      None

      returns:
      --------
      Mengembalikan nilai items
      """
      # Memeriksa apakah ada transaksi atau tidak
      if not self.items:
          print("Tidak ada daftar transaksi")
          return

      # Memeriksa setiap item dalam daftar transaksi
      for item in self.items:
          # Jika ada kesalahan dalam input data
          if '' in item.values():
              print("Terdapat kesalahan dalam input data")
              return

      # Jika tidak ada kesalahan dan transaksi sudah benar
      print("Transaksi sudah benar")

  def check_items(self):
      """
      Menampilkan daftar item dalam transaksi menggunakan tabulate

      Parameter:
      ---------
      None
      """
      headers = ["Nama Item", "Jumlah Item", "Harga Item", "Total Harga"]

      print("Daftar Barang Belanja")
      print("")
      rows = [[item['nama_item'], item['jumlah_item'], item['harga_item'], item['total_harga']] for item in self.items]
      print(tabulate(rows, headers=headers, tablefmt='grid'))

  def update_item_name(self, old_name, new_name):
      """
      Fungsi ini digunakan untuk mengganti nama item pada daftar transaksi dari nama lama menjadi nama baru.

      Parameter:
      ----------
          old_name : str
                Nama item lama yang ingin diganti

          new_name : str
                Nama item baru

      Raises:
      -------
          ValueError:
                Jika tipe data dari `new_name` bukan string

      Returns:
      --------
      None
      """
      for item in self.items:
        # Memeriksa apakah nama item pada item saat ini sama dengan old_name
        if item['nama_item'] == old_name:
          if type(new_name) != str:
            raise ValueError("Format tipe data nama item yang anda masukan salah")
          else:
            item['nama_item'] = new_name

  def update_item_qty(self, name, new_qty):
      """
      Memperbarui jumlah item dalam transaksi

      Parameter:
          name : str
                Nama item yang jumlahnya ingin diganti

          new_qty : int
                Jumlah item baru

      Raises:
      -------
          ValueError:
                Jika tipe data dari `new_qty` bukan integer

      Returns:
      --------
      None
      """
      for item in self.items:
        if item['nama_item'] == name:
          if type(new_qty) != int:
            raise ValueError("Format tipe data yang anda masukkan salah")
          else:
            item['jumlah_item'] = int(new_qty)

  def update_item_price(self, name, new_price):
      """
      Memperbarui harga per item dalam transaksi

      Parameter:
          name : str
                Nama item yang harganya ingin diganti

          new_price : int
                Harga item baru

      Raises:
      -------
          ValueError:
                Jika tipe data dari `new_price` bukan integer

      Returns:
      --------
      None
      """
      for item in self.items:
        if item['nama_item'] == name:
          if type(new_price) != int:
            raise ValueError("Format tipe data yang anda masukkan salah")
          else:
            item['harga_item'] = new_price

  def delete_item(self, nama_item):
      """
      Menghapus baris item yang ada di list_item

      Parameter:
          nama_item : str
                Nama item yang ingin dihapus

      Returns:
      --------
      None
      """
      try:

          for item in self.items:
            if item['nama_item'] == nama_item:
                self.items.remove(item)
                print(f"Item {item['nama_item']} berhasil dihapus!")

      except ValueError:
          print("Data tidak tersedia dalam daftar item")

  def reset_transaction(self):
      """
      Menghapus semua daftar item
      """
      self.items = {}
      print("Keranjang belanja telah dikosongkan!")

  def total_price(self):
      """
      Menghitung total harga pembelian dan diskon yang didapat
      """
      try:
        # Inisialisasi total harga akhir
        total_harga_akhir = 0

        # Menghitung total harga sebelum diskon
        for item in self.items:
          total_harga_akhir += item['jumlah_item'] * item['harga_item']

        # Menghitung diskon berdasarkan total harga
        diskon = 0
        if total_harga_akhir > 500_000:
            # Mendapatkan diskon 10%
            diskon = total_harga_akhir * 0.10
            total_harga_akhir -= diskon
            print(f'Selamat, anda mendapatkan diskon 10%')
        elif total_harga_akhir > 300_000:
            # Mendapatkan diskon 8%
            diskon = total_harga_akhir * 0.08
            total_harga_akhir -= diskon
            print(f'Selamat, anda mendapatkan diskon 8%')
        elif total_harga_akhir > 200_000:
            # Mendapatkan diskon 5%
            diskon = total_harga_akhir * 0.05
            total_harga_akhir -= diskon
            print(f'Selamat, anda mendapatkan diskon 5%')
        else:
            print('Tidak mendapatkan diskon')

        print(f'Total diskon: Rp {diskon}')
        print(f'Total yang harus dibayar: Rp {total_harga_akhir}')

      except ValueError:
        print("Inputan tidak sesuai")

"""=============================================Testing=========================================================="""

# Testing 1 add item dan check items
trnsct_123 = Transaction()
trnsct_123.add_item("Ayam Goreng", 2, 20000)
trnsct_123.add_item("Pasta Gigi", 3, 15000)
trnsct_123.check_items()

# Testing 2 Delete items
trnsct_123.delete_item("Pasta Gigi")
trnsct_123.check_items()

# Testing 3 Reset Transaction
trnsct_123.reset_transaction()
trnsct_123.check_items()

# Testing 4 Check Order
trnsct_123 = Transaction()
trnsct_123.add_item("Ayam Goreng", 2, 20000)
trnsct_123.add_item("Pasta Gigi", 3, 15000)
trnsct_123.add_item("Mainan Mobil", 1, 200000)
trnsct_123.add_item("Mi Instan", 5, 3000)
trnsct_123.check_order()

# Testing 5 Menghitung Total yang harus dibayar
trnsct_123.total_price()
trnsct_123.check_items()

# Testing 6 Update Item Name
trnsct_123.update_item_name("Pasta Gigi", "Pear")
trnsct_123.check_items()

# Testing 7 Update Item Jumlah
trnsct_123.update_item_qty("Pear", 8)
trnsct_123.check_items()

# Testing 8 Update Item Harga
trnsct_123.update_item_price("Pear", 5000)
trnsct_123.check_items()