{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "#import table\n",
        "from tabulate import tabulate\n",
        "\n",
        "class Transaction:\n",
        "  def __init__(self):\n",
        "      \"\"\"\n",
        "      Inisialisasi objek transaksi dengan daftar item kosong\n",
        "      \"\"\"\n",
        "      self.items = []\n",
        "\n",
        "  def add_item(self, nama_item, jumlah_item, harga_item):\n",
        "      \"\"\"\n",
        "      Fungsi untuk menambahkan item yang ingin dibeli ke dalam list items\n",
        "\n",
        "      Parameter:\n",
        "      ---------\n",
        "          data : dict\n",
        "                Didalam data terdapat nama item, jumlah item, harga item, dan total harga\n",
        "\n",
        "          nama_item : str\n",
        "                Nama item yang akan diinputkan\n",
        "\n",
        "          jumlah_item : int\n",
        "                Jumlah item yang akan diinputkan\n",
        "\n",
        "          harga_item : int\n",
        "                Harga per item dalam rupiah yang akan diinputkan\n",
        "\n",
        "      Returns:\n",
        "      --------\n",
        "      None\n",
        "      \"\"\"\n",
        "      try:\n",
        "        #data merupakan dictionary yang digunakan untuk menyimpan nama_item, jumlah_item,\n",
        "        #harga_item, dan total_harga\n",
        "        data = {\"nama_item\" : str(nama_item),\n",
        "                \"jumlah_item\" : int(jumlah_item),\n",
        "                \"harga_item\" : int(harga_item),\n",
        "                \"total_harga\" : int(jumlah_item * harga_item)}\n",
        "\n",
        "        #input data ke dalam daftar list items\n",
        "        self.items.append(data)\n",
        "\n",
        "      except ValueError:\n",
        "        print(\"Tipe data yang diinputkan tidak sesuai. Pastikan jumlah item, harga item, dan total harga berupa angka\")\n",
        "\n",
        "      except TypeError:\n",
        "        print(\"Tipe data tidak sesuai\")\n",
        "\n",
        "  def check_order(self):\n",
        "      \"\"\"\n",
        "      Memeriksa apakah transaksi sudah benar atau terdapat kesalahan dalam\n",
        "      melakukan input data\n",
        "\n",
        "      Jika tidak ada transaksi, akan mencetak pesan \"Tidak ada daftar transaksi\".\n",
        "      Jika terdapat kesalahan dalam input data, akan mencetak pesan \"Terdapat kesalahan dalam input data\".\n",
        "      Jika transaksi sudah benar, akan mencetak pesan \"Transaksi sudah benar\".\n",
        "\n",
        "      Parameter:\n",
        "      ---------\n",
        "      None\n",
        "\n",
        "      returns:\n",
        "      --------\n",
        "      Mengembalikan nilai items\n",
        "      \"\"\"\n",
        "      # Memeriksa apakah ada transaksi atau tidak\n",
        "      if not self.items:\n",
        "          print(\"Tidak ada daftar transaksi\")\n",
        "          return\n",
        "\n",
        "      # Memeriksa setiap item dalam daftar transaksi\n",
        "      for item in self.items:\n",
        "          # Jika ada kesalahan dalam input data\n",
        "          if '' in item.values():\n",
        "              print(\"Terdapat kesalahan dalam input data\")\n",
        "              return\n",
        "\n",
        "      # Jika tidak ada kesalahan dan transaksi sudah benar\n",
        "      print(\"Transaksi sudah benar\")\n",
        "\n",
        "  def check_items(self):\n",
        "      \"\"\"\n",
        "      Menampilkan daftar item dalam transaksi menggunakan tabulate\n",
        "\n",
        "      Parameter:\n",
        "      ---------\n",
        "      None\n",
        "      \"\"\"\n",
        "      headers = [\"Nama Item\", \"Jumlah Item\", \"Harga Item\", \"Total Harga\"]\n",
        "\n",
        "      print(\"Daftar Barang Belanja\")\n",
        "      print(\"\")\n",
        "      rows = [[item['nama_item'], item['jumlah_item'], item['harga_item'], item['total_harga']] for item in self.items]\n",
        "      print(tabulate(rows, headers=headers, tablefmt='grid'))\n",
        "\n",
        "  def update_item_name(self, old_name, new_name):\n",
        "      \"\"\"\n",
        "      Fungsi ini digunakan untuk mengganti nama item pada daftar transaksi dari nama lama menjadi nama baru.\n",
        "\n",
        "      Parameter:\n",
        "      ----------\n",
        "          old_name : str\n",
        "                Nama item lama yang ingin diganti\n",
        "\n",
        "          new_name : str\n",
        "                Nama item baru\n",
        "\n",
        "      Raises:\n",
        "      -------\n",
        "          ValueError:\n",
        "                Jika tipe data dari `new_name` bukan string\n",
        "\n",
        "      Returns:\n",
        "      --------\n",
        "      None\n",
        "      \"\"\"\n",
        "      for item in self.items:\n",
        "        # Memeriksa apakah nama item pada item saat ini sama dengan old_name\n",
        "        if item['nama_item'] == old_name:\n",
        "          if type(new_name) != str:\n",
        "            raise ValueError(\"Format tipe data nama item yang anda masukan salah\")\n",
        "          else:\n",
        "            item['nama_item'] = new_name\n",
        "\n",
        "  def update_item_qty(self, name, new_qty):\n",
        "      \"\"\"\n",
        "      Memperbarui jumlah item dalam transaksi\n",
        "\n",
        "      Parameter:\n",
        "          name : str\n",
        "                Nama item yang jumlahnya ingin diganti\n",
        "\n",
        "          new_qty : int\n",
        "                Jumlah item baru\n",
        "\n",
        "      Raises:\n",
        "      -------\n",
        "          ValueError:\n",
        "                Jika tipe data dari `new_qty` bukan integer\n",
        "\n",
        "      Returns:\n",
        "      --------\n",
        "      None\n",
        "      \"\"\"\n",
        "      for item in self.items:\n",
        "        if item['nama_item'] == name:\n",
        "          if type(new_qty) != int:\n",
        "            raise ValueError(\"Format tipe data yang anda masukkan salah\")\n",
        "          else:\n",
        "            item['jumlah_item'] = int(new_qty)\n",
        "\n",
        "  def update_item_price(self, name, new_price):\n",
        "      \"\"\"\n",
        "      Memperbarui harga per item dalam transaksi\n",
        "\n",
        "      Parameter:\n",
        "          name : str\n",
        "                Nama item yang harganya ingin diganti\n",
        "\n",
        "          new_price : int\n",
        "                Harga item baru\n",
        "\n",
        "      Raises:\n",
        "      -------\n",
        "          ValueError:\n",
        "                Jika tipe data dari `new_price` bukan integer\n",
        "\n",
        "      Returns:\n",
        "      --------\n",
        "      None\n",
        "      \"\"\"\n",
        "      for item in self.items:\n",
        "        if item['nama_item'] == name:\n",
        "          if type(new_price) != int:\n",
        "            raise ValueError(\"Format tipe data yang anda masukkan salah\")\n",
        "          else:\n",
        "            item['harga_item'] = new_price\n",
        "\n",
        "  def delete_item(self, nama_item):\n",
        "      \"\"\"\n",
        "      Menghapus baris item yang ada di list_item\n",
        "\n",
        "      Parameter:\n",
        "          nama_item : str\n",
        "                Nama item yang ingin dihapus\n",
        "\n",
        "      Returns:\n",
        "      --------\n",
        "      None\n",
        "      \"\"\"\n",
        "      try:\n",
        "\n",
        "          for item in self.items:\n",
        "            if item['nama_item'] == nama_item:\n",
        "                self.items.remove(item)\n",
        "                print(f\"Item {item['nama_item']} berhasil dihapus!\")\n",
        "\n",
        "      except ValueError:\n",
        "          print(\"Data tidak tersedia dalam daftar item\")\n",
        "\n",
        "  def reset_transaction(self):\n",
        "      \"\"\"\n",
        "      Menghitung total harga pembelian dan diskon yang didapat\n",
        "      \"\"\"\n",
        "      self.items = {}\n",
        "      print(\"Keranjang belanja telah dikosongkan!\")\n",
        "\n",
        "  def total_price(self):\n",
        "      \"\"\"\n",
        "      Menghitung total harga transaksi setelah mendapatkan diskon\n",
        "      \"\"\"\n",
        "      try:\n",
        "        # Inisialisasi total harga akhir\n",
        "        total_harga_akhir = 0\n",
        "\n",
        "        # Menghitung total harga sebelum diskon\n",
        "        for item in self.items:\n",
        "          total_harga_akhir += item['jumlah_item'] * item['harga_item']\n",
        "\n",
        "        # Menghitung diskon berdasarkan total harga\n",
        "        diskon = 0\n",
        "        if total_harga_akhir > 500_000:\n",
        "            # Mendapatkan diskon 10%\n",
        "            diskon = total_harga_akhir * 0.10\n",
        "            total_harga_akhir -= diskon\n",
        "            print(f'Selamat, anda mendapatkan diskon 10%')\n",
        "        elif total_harga_akhir > 300_000:\n",
        "            # Mendapatkan diskon 8%\n",
        "            diskon = total_harga_akhir * 0.08\n",
        "            total_harga_akhir -= diskon\n",
        "            print(f'Selamat, anda mendapatkan diskon 8%')\n",
        "        elif total_harga_akhir > 200_000:\n",
        "            # Mendapatkan diskon 5%\n",
        "            diskon = total_harga_akhir * 0.05\n",
        "            total_harga_akhir -= diskon\n",
        "            print(f'Selamat, anda mendapatkan diskon 5%')\n",
        "        else:\n",
        "            print('Tidak mendapatkan diskon')\n",
        "\n",
        "        print(f'Total diskon: Rp {diskon}')\n",
        "        print(f'Total yang harus dibayar: Rp {total_harga_akhir}')\n",
        "\n",
        "      except ValueError:\n",
        "        print(\"Inputan tidak sesuai\")\n"
      ],
      "metadata": {
        "id": "BmQb9g9feTym"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "=============================================Testing=========================================================="
      ],
      "metadata": {
        "id": "oew3IqJ61vQU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing 1 add item dan check items\n",
        "trnsct_123 = Transaction()\n",
        "trnsct_123.add_item(\"Ayam Goreng\", 2, 20000)\n",
        "trnsct_123.add_item(\"Pasta Gigi\", 3, 15000)\n",
        "trnsct_123.check_items()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eXjrNrBccw_Q",
        "outputId": "50814119-49d9-4d0c-b587-ce856c7c819b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Daftar Barang Belanja\n",
            "\n",
            "+-------------+---------------+--------------+---------------+\n",
            "| Nama Item   |   Jumlah Item |   Harga Item |   Total Harga |\n",
            "+=============+===============+==============+===============+\n",
            "| Ayam Goreng |             2 |        20000 |         40000 |\n",
            "+-------------+---------------+--------------+---------------+\n",
            "| Pasta Gigi  |             3 |        15000 |         45000 |\n",
            "+-------------+---------------+--------------+---------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing 2 Delete items\n",
        "trnsct_123.delete_item(\"Pasta Gigi\")\n",
        "trnsct_123.check_items()"
      ],
      "metadata": {
        "id": "I20SGeQN2lfJ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e4f5f9c4-00bf-479a-ac86-99b9af1e33b0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Item Pasta Gigi berhasil dihapus!\n",
            "Daftar Barang Belanja\n",
            "\n",
            "+-------------+---------------+--------------+---------------+\n",
            "| Nama Item   |   Jumlah Item |   Harga Item |   Total Harga |\n",
            "+=============+===============+==============+===============+\n",
            "| Ayam Goreng |             2 |        20000 |         40000 |\n",
            "+-------------+---------------+--------------+---------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing 3 Reset Transaction\n",
        "trnsct_123.reset_transaction()\n",
        "trnsct_123.check_items()"
      ],
      "metadata": {
        "id": "gk02bjNK213B",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b9e97ccb-f4dc-49b2-8e38-8643de1fd61a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Keranjang belanja telah dikosongkan!\n",
            "Daftar Barang Belanja\n",
            "\n",
            "+-------------+---------------+--------------+---------------+\n",
            "| Nama Item   | Jumlah Item   | Harga Item   | Total Harga   |\n",
            "+=============+===============+==============+===============+\n",
            "+-------------+---------------+--------------+---------------+\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing 4 Check Order\n",
        "trnsct_123 = Transaction()\n",
        "trnsct_123.add_item(\"Ayam Goreng\", 2, 20000)\n",
        "trnsct_123.add_item(\"Pasta Gigi\", 3, 15000)\n",
        "trnsct_123.add_item(\"Mainan Mobil\", 1, 200000)\n",
        "trnsct_123.add_item(\"Mi Instan\", 5, 3000)\n",
        "trnsct_123.check_order()"
      ],
      "metadata": {
        "id": "MlY0zWQq3Gv8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d6400b7a-70e9-4241-9c7a-4537dee09098"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Transaksi sudah benar\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing 5 Menghitung Total yang harus dibayar\n",
        "trnsct_123.total_price()\n",
        "trnsct_123.check_items()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bKeOwPoGyiZD",
        "outputId": "a7bc89f4-01ee-4d29-df83-3767afd6a5a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selamat, anda mendapatkan diskon 5%\n",
            "Total diskon: Rp 15000.0\n",
            "Total yang harus dibayar: Rp 285000.0\n",
            "Daftar Barang Belanja\n",
            "\n",
            "+--------------+---------------+--------------+---------------+\n",
            "| Nama Item    |   Jumlah Item |   Harga Item |   Total Harga |\n",
            "+==============+===============+==============+===============+\n",
            "| Ayam Goreng  |             2 |        20000 |         40000 |\n",
            "+--------------+---------------+--------------+---------------+\n",
            "| Pasta Gigi   |             3 |        15000 |         45000 |\n",
            "+--------------+---------------+--------------+---------------+\n",
            "| Mainan Mobil |             1 |       200000 |        200000 |\n",
            "+--------------+---------------+--------------+---------------+\n",
            "| Mi Instan    |             5 |         3000 |         15000 |\n",
            "+--------------+---------------+--------------+---------------+\n"
          ]
        }
      ]
    }
  ]
}